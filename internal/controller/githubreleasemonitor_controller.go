/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"errors"
	"fmt"
	"time"

	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	githubv1 "csye7125.team05/cve-operator/api/v1"
	"csye7125.team05/cve-operator/internal/model"
)

// GithubReleaseMonitorReconciler reconciles a GithubReleaseMonitor object
type GithubReleaseMonitorReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

var releaseList []model.GithubReleaseAssetItem

// +kubebuilder:rbac:groups=github.csye7125.team05,resources=githubreleasemonitors,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=github.csye7125.team05,resources=githubreleasemonitors/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=github.csye7125.team05,resources=githubreleasemonitors/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the GithubReleaseMonitor object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/reconcile
func (r *GithubReleaseMonitorReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	// Check if instance GithubReleaseMonitor exists
	ghReleaseMonitor := &githubv1.GithubReleaseMonitor{}

	err := r.Get(ctx, req.NamespacedName, ghReleaseMonitor)

	if err != nil {
		if apierrors.IsNotFound(err) {
			log.Info("GithubReleaseMonitor resource not found. Ignoring since object must be deleted")
			return ctrl.Result{}, nil
		}

		log.Error(err, "Failed to get GithubReleaseMonitor")
		return ctrl.Result{}, err
	}

	isGithubReleaseMonitorDeleteGiven := ghReleaseMonitor.GetDeletionTimestamp() != nil

	if isGithubReleaseMonitorDeleteGiven {
		// TODO : Finalizer logic
		// Delete the GithubReleaseMonitor
		return ctrl.Result{}, nil
	}

	releaseUrl := ghReleaseMonitor.Spec.Url
	monitorFrom := ghReleaseMonitor.Spec.MonitorFrom

	if monitorFrom != "now" {
		log.Info("Checking for the releases from the monitorFrom time")
		releases, err := r.GetGithubReleaseFromDate(monitorFrom, releaseUrl)
		if err != nil {
			return ctrl.Result{}, err
		}

		for _, release := range releases {
			fmt.Println(release)
			err := r.CreateGithubRelease(ctx, release, req.Namespace)
			if err != nil {
				return ctrl.Result{}, err
			}
		}

	}

	log.Info("Checking for the latest release")
	// Get the latest release
	release := r.GetLatestGithubRelease(releaseUrl)
	err = r.CreateGithubRelease(ctx, release, req.Namespace)

	if err != nil {
		return ctrl.Result{}, err
	}

	currentTime := time.Now()
	ghReleaseMonitor.Status.LastCheckedAt = currentTime.Format("2006-01-02 15:04:05")
	if len(releaseList) > 0 {
		ghReleaseMonitor.Status.LastRelease = releaseList[len(releaseList)-1].Name
	}

	r.Status().Update(ctx, ghReleaseMonitor)

	return ctrl.Result{RequeueAfter: time.Minute * 30}, nil
}

func (r *GithubReleaseMonitorReconciler) CreateGithubRelease(ctx context.Context, release model.GithubReleaseAssetItem, namespace string) error {
	var existingRelease githubv1.GithubRelease
	log := log.FromContext(ctx)
	err := r.Get(ctx, types.NamespacedName{Name: release.Name, Namespace: namespace}, &existingRelease)
	if err != nil && apierrors.IsNotFound(err) {
		log.Info("Creating a new GithubRelease CR", "Name", release.Name)
		// newRelease := createGitHubReleaseCR(release)
		// err = r.Create(ctx, newRelease)
		// if err != nil {
		// 	return err
		// }
		releaseList = append(releaseList, release)
	}
	return nil
}

func createGitHubReleaseCR(release model.GithubReleaseAssetItem) *githubv1.GithubRelease {
	return &githubv1.GithubRelease{}
}

// SetupWithManager sets up the controller with the Manager.
func (r *GithubReleaseMonitorReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&githubv1.GithubReleaseMonitor{}).
		Complete(r)
}

func (r *GithubReleaseMonitorReconciler) GetLatestGithubRelease(url string) model.GithubReleaseAssetItem {
	// Get the latest release from the url

	currentDate := time.Now().UTC()
	currentDate.Add(-30 * time.Minute)
	currentDateStart := time.Date(currentDate.Year(), currentDate.Month(), currentDate.Day(), currentDate.Hour(), 0, 0, 0, time.UTC)

	return model.GithubReleaseAssetItem{
		Name:     currentDateStart.Format("2006-01-02_1504Z"),
		AssetUrl: fmt.Sprintf("%s/download/cve_%s/%s_delta_CVEs_at_%s.zip", url, currentDateStart.Format("2006-01-02_1504Z"), currentDateStart.Format("2006-01-02"), currentDateStart.Format("1504Z")),
	}
}

func (r *GithubReleaseMonitorReconciler) GetGithubReleaseFromDate(date string, url string) ([]model.GithubReleaseAssetItem, error) {
	// Get the latest release from the url
	previousDates, err := r.getPreviousDates(date)
	if err != nil {
		return nil, err
	}
	releases := []model.GithubReleaseAssetItem{}
	for _, d := range previousDates {
		// Get the release for the date
		releases = append(releases, model.GithubReleaseAssetItem{
			Name:     d,
			AssetUrl: fmt.Sprintf("%s/download/cve_%s_at_end_of_day/%s_delta_CVEs_at_end_of_day.zip", url, d, d),
		})

	}

	currentDate := time.Now().UTC()
	currentDateStart := time.Date(currentDate.Year(), currentDate.Month(), currentDate.Day(), 0, 0, 0, 0, time.UTC)

	for d := currentDateStart; d.Before(currentDate.Add(-30 * time.Minute)); d = d.Add(time.Hour) {
		formatedString := d.Format("2006-01-02_1504Z")
		releases = append(releases, model.GithubReleaseAssetItem{
			Name:     formatedString,
			AssetUrl: fmt.Sprintf("%s/download/cve_%s/%s_delta_CVEs_at_%s.zip", url, formatedString, d.Format("2006-01-02"), d.Format("1504Z")),
		})
	}
	// "https://github.com/CVEProject/cvelistV5/releases/download/cve_2024-07-25_0100Z/2024-07-25_delta_CVEs_at_0100Z.zip"
	return releases, nil
}

func (r *GithubReleaseMonitorReconciler) getPreviousDates(inputDateStr string) ([]string, error) {
	// Get the previous dates from the monitorFrom date

	// Parse the input date
	inputDate, err := time.Parse("2006-01-02", inputDateStr)
	if err != nil {
		fmt.Println("Error parsing input date:", err)
		return nil, err
	}
	dates := []string{}

	// Get the current date
	currentDate := time.Now().UTC()
	currentDate = time.Date(currentDate.Year(), currentDate.Month(), currentDate.Day(), 0, 0, 0, 0, time.UTC)
	// Check if the input date is before or equal to the current date
	if inputDate.After(currentDate) {
		fmt.Println("Input date is after the current date")
		return nil, errors.New("input date is after the current date")
	} else {
		// Print the dates from the input date to the current date (inclusive)
		d := inputDate

		for ; d.Before(currentDate); d = d.AddDate(0, 0, 1) {
			dates = append(dates, d.Format("2006-01-02"))
		}
		fmt.Println(d.Format("2006-01-02"))
	}

	return dates, nil
}
