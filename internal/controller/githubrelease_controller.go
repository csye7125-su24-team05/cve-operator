/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"fmt"
	"time"

	"github.com/go-logr/logr"
	batchv1 "k8s.io/api/batch/v1"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	githubv1 "csye7125.team05/cve-operator/api/v1"
)

// GithubReleaseReconciler reconciles a GithubRelease object
type GithubReleaseReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=github.csye7125.team05,resources=githubreleases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=github.csye7125.team05,resources=githubreleases/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=github.csye7125.team05,resources=githubreleases/finalizers,verbs=update
// +kubebuilder:rbac:groups=batch,resources=jobs,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=batch,resources=jobs/status,verbs=get

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the GithubRelease object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/reconcile
func (r *GithubReleaseReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	// TODO(user): your logic here
	log.V(1).Info("Reconciling GithubRelease")
	scheduleResult := ctrl.Result{RequeueAfter: time.Second * 10}

	// Fetch the GithubRelease instance
	var githubRelease githubv1.GithubRelease
	if err := r.Get(ctx, req.NamespacedName, &githubRelease); err != nil {
		log.Error(err, "unable to fetch GithubRelease")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	// Check if Job already exists for the GithubRelease
	var childJob batchv1.Job
	if err := r.Get(ctx, types.NamespacedName{Name: generateJobName(&githubRelease), Namespace: githubRelease.Namespace}, &childJob); err != nil {
		if client.IgnoreNotFound(err) == nil {
			log.V(1).Info("unable to fetch Job for GithubRelease Job creating new Job")
			job, err := r.createGithubReleaseJob(&githubRelease, log)
			if err != nil {
				log.Error(err, "unable to create Job form template")
				return scheduleResult, nil
			}

			if err := r.Create(ctx, job); err != nil {
				log.Error(err, "unable to create Job for GithubRelease")
				return ctrl.Result{}, err
			}
			return scheduleResult, nil
		}
		log.Error(err, "unable to fetch Job for GithubRelease")
		return ctrl.Result{}, err
	}

	if childJob.Status.Failed > 0 {
		log.Info("Job failed")
		githubRelease.Status.JobStatus = "Failed"
		if err := r.Status().Update(ctx, &githubRelease); err != nil {
			log.Error(err, "unable to update GithubRelease status")
			return ctrl.Result{}, err
		}
		if err := r.Delete(ctx, &childJob); err != nil {
			log.Error(err, "unable to delete Job")
			return ctrl.Result{}, err
		}
		// Create Job for GithubRelease
		job, err := r.createGithubReleaseJob(&githubRelease, log)
		if err != nil {
			log.Error(err, "unable to create Job form template")
			return scheduleResult, nil
		}
		if err := r.Create(ctx, job); err != nil {
			log.Error(err, "unable to create Job for GithubRelease")
			return ctrl.Result{}, err
		}
	}

	if childJob.Status.Succeeded > 0 {
		log.Info("Job completed successfully")
		githubRelease.Status.JobStatus = "Completed"
		if err := r.Status().Update(ctx, &githubRelease); err != nil {
			log.Error(err, "unable to update GithubRelease status")
			return ctrl.Result{}, err
		}
		return scheduleResult, nil
	}

	return scheduleResult, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *GithubReleaseReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&githubv1.GithubRelease{}).
		Owns(&batchv1.Job{}).
		Complete(r)
}

func generateJobName(githubRelease *githubv1.GithubRelease) string {
	return fmt.Sprintf("%s-job", githubRelease.Name)
}

func (r *GithubReleaseReconciler) createGithubReleaseJob(githubRelease *githubv1.GithubRelease, log logr.Logger) (*batchv1.Job, error) {
	jobName := generateJobName(githubRelease)
	job := &batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Labels:      make(map[string]string),
			Annotations: make(map[string]string),
			Name:        jobName,
			Namespace:   githubRelease.Namespace,
		},
		Spec: *githubRelease.Spec.JobTemplate.Spec.DeepCopy(),
	}

	for k, v := range githubRelease.Spec.JobTemplate.Labels {
		job.Labels[k] = v
	}

	for k, v := range githubRelease.Spec.JobTemplate.Annotations {
		job.Annotations[k] = v
	}

	if len(job.Spec.Template.Spec.Containers) > 0 {
		job.Spec.Template.Spec.Containers[0].Env = append(job.Spec.Template.Spec.Containers[0].Env, v1.EnvVar{
			Name:  "CVE_URL",
			Value: githubRelease.Spec.AssetUrl,
		})
	} else {
		log.Info("No containers found in Job")
		return nil, fmt.Errorf("no containers found in Job")
	}

	if err := ctrl.SetControllerReference(githubRelease, job, r.Scheme); err != nil {
		return nil, err
	}
	return job, nil
}
